42.2 Welcome 42.2
Encapsulation
You need a program to manage admissions for an art school. Pupils can be admitted to the school if they are over 6 years of age.
You're given a program which declares a Pupil class.
Task
Complete the setAge method of the Pupil class. If the value of parameter a is over 6, assign it to age attribute and output "Welcome".
Output "Sorry" otherwise.
Sample Input
7
Sample Output
Welcome

42.3 Calculating Net Revenue With Taxes
Encapsulation
You work in finance at IT company,
The program you are given takes the total income and the tax percent as input, and creates an income object with public total income, tax percent and private net revenue attributes.
Complete the class by methods which will calculate and return the net revenue, so that the given output works correctly.
Sample Input
150000
14

43.2 Upgrade Your Subscription!
Inheritance

You are developing your own photo editing application.
The standard free version allows you to draw and write text on a photo. The Pro subscription has 2 more features - the ability to use effects and the ability to change resolution.
Complete/fix the given code to inherit Pro class from Standard class and successfully execute all the given method calls.
Be attentive to access modifiers.

44.2 Car Classes
Polymorphism

Vehicles can be classified according to what energy source powers them. The program you are given has 3 vehicle classes: Vehicle, ElectricVehicle and HybridVehicle.
ElectricVehicle and HybridVehicle classes are inherited from Vehicle class.
Complete the program by reimplementing method resource() in inherited classes, so that the given calls work correctly.

45.2 Checking Or Savings
Overriding
You are writing a program that calculates interest income based on account type. If it is a saving account, 20% is added to the balance in the account. If it is a checking account, 5% more is added to the balance in the account.
The program you are given should the balance of the savings and checking accounts and output the appropriate balance plus interest income
Account class and SavingAcc & CheckingAcc classes inherited from it are already defined.
Override getIncome() methods in the inherited classes to calculate and return the account balances, so that the given outputs work correctly.
Sample Input
100.0
100.0
Sample Output
120.0
105.0
Explanation
The first input represents balance in the savings account, so the balance plus interest income should be 100.0 + 100.0*0.2 = 120.0.
The second input represents balance in the checking account, so the balance plus interest income should be 100.0 + 100.0*0.05 = 105.0.


45.3 Double Trouble
Overloading
Complete and overload the doubleTheValue() method to calculate the double the value of the a and b variables.
Be attentive to value types of parameters while overloading.


46.2 Board Game Attributes
A board game company creates new board games every year. While all the games have different rules, they also are all similar in that they each have a name and a play() method.
We need to create 3 different games - Monopoly, Chess and Battleships. In the play() method Monopoly should print “Buy all property.”, Battleships - “Sink all ships.”, and Chess - “Kill the enemy king.”
Complete the code by implementing the getName() and play() methods inherited from abstract Game class.

47.2 Animal Lovers
You love all animals, and have a dog and a cat as pets.
The program you are given defines an abstract class Animal, and has Dog & Cat classes inherited from it.
Implement the Swimmer and Player interface and override their methods swim() and play(), so that the given method calls output the following messages:
swim():
Dog => "Dog is swimming"
Cat => "Cat is swimming"
play():
Dog => "Dog is playing"
Cat => "Cat is playing"

48.2 ComputerSpeak
Casting
Computers understand only numbers, so every character has a numeric representation.
The program you are given takes a character as input. Write a program to output its numeric value.
Sample Input
a
Sample Output
97

50.2 Special Customer Discount
You are a store manager.
You are offering a 10% discount on all items in the store. Today, you have had a total of two customers. To the first, you honored the 10% discount on all purchased items. The second customer, however, purchased a lot of items and you want to give him a bigger discount -- 20% -- to show your appreciation.
Complete the program by creating two Purchase objects - 1 for the regular customer, and 1 for a special one, and override the totalAmount() method for the special customer on the fly to set the proper 20% discount

52.3 How Many Bullets
Our shooter video game has 3 difficulty options - EASY, MEDIUM, HARD.
For each difficulty level, the player has a corresponding number of bullets.
The program you are given defines Player class and Difficulty Enum, and creates 3 Player objects with different difficulties as parameters for the constructor.
Complete the Player constructor, which takes the Enum as a parameter to check number of bullets for each difficulty option and output the corresponding message:
EASY => "You have 3000 bullets"
MEDIUM => "You have 2000 bullets"
HARD => "You have 1000 bullets"
Use a switch statement to check for each option of the enum and output the corresponding message.

50.0 Shapes
Shapes


You are working on a graphical app, which includes multiple different shapes.
The given code declares a base Shape class with an abstract area() method and a width attribute.
You need to create two Shape subclasses, Square and Circle, which initialize the width attribute using their constructor, and define their area() methods.
The area() for the Square class should output the area of the square (the square of the width), while for the Circle, it should output the area of the given circle (PI*width*width).
The code in main creates two objects with the given user input and calls the area() methods.

Sample Input:
5
2

Sample Output:
25
12.566370614359172

The area of the square is 5*5=25, while the area of the circle is PI*2*2=12.566370614359172