27.1 Object-Oriented Programming
Object-Orientation

Java uses Object-Oriented Programming (OOP), a programming style that is intended to make thinking about programming closer to thinking about the real world.
In OOP, each object is an independent unit with a unique identity, just as objects in the real world are.
An apple is an object; so is a mug. Each has its unique identity. It's possible to have two mugs that look identical, but they are still separate, unique objects.
Objects also have characteristics, which are used to describe them.

For example, a car can be red or blue, a mug can be full or empty, and so on. These characteristics are also called attributes. An attribute describes the current state of an object.
In the real world, each object behaves in its own way. The car moves, the phone rings, and so on.
The same applies to objects: behavior is specific to the object's type.
In summary, in object oriented programming, each object has three dimensions: identity, attributes, and behavior.
Attributes describe the object's current state, and what the object is capable of doing is demonstrated through the object's behavior.
Classes

A class describes what the object will be, but is separate from the object itself.
In other words, classes can be described as blueprints, descriptions, or definitions for an object. You can use the same class as a blueprint for creating multiple objects. The first step is to define the class, which then becomes a blueprint for object creation.

Each class has a name, and each is used to define attributes and behavior.
Some examples of attributes and behavior:contentImage
In other words, an object is an instance of a class.


28.1 Methods

Methods define behavior. A method is a collection of statements that are grouped together to perform an operation. System.out.println() is an example of a method.
You can define your own methods to perform your desired tasks.
Let's consider the following code:

class MyClass {

    static void sayHello() {
        System.out.println("Hello World!");
    }

    public static void main(String[ ] args) {
        sayHello();
    }

}
The code above declares a method called "sayHello", which prints a text, and then gets called in main.

28.1 Creating Classes & Objects

Creating Objects

Let's head over to our main and create a new object of our class.
MyClass.java

public class Animal {
    void bark() {
        System.out.println("Woof-Woof");
    }
}

class MyClass {
    public static void main(String[ ] args) {
        Animal dog = new Animal();
        dog.bark();
    }
}

Now, dog is an object of type Animal. Thus we can call its bark() method, using the name of the object and a dot.
The dot notation is used to access the object's attributes and methods.

31.1 Class Attributes

Defining Attributes

A class has attributes and methods. The attributes are basically variables within a class.
Let's create a class called Vehicle, with its corresponding attributes and methods.

public class Vehicle {
  int maxSpeed;
  int wheels;
  String color;
  double fuelCapacity;

  void horn() {
    System.out.println("Beep!");
  }
}
maxSpeed, wheels, color and fuelCapacity are the attributes of our Vehicle class, and horn() is the only method.


31.1 Creating Objects
Next, we can create multiple objects of our Vehicle class, and use the dot syntax to access their attributes and methods.

public class Vehicle {
    int maxSpeed;
    int wheels;
    String color;
    double fuelCapacity;

    void horn() {
        System.out.println("Beep!");
    }
}

class MyClass {
    public static void main(String[ ] args) {
        Vehicle v1 = new Vehicle();
        Vehicle v2 = new Vehicle();
        v1.color = "red";
        v2.horn();
    }
}

32.1Access Modifiers


    Now let's discuss the public keyword in front of the main method.
    public static void main(String[ ] args)

    public is an access modifier, meaning that it is used to set the level of access. You can use access modifiers for classes, attributes, and methods.

    For classes, the available modifiers are public or default (left blank), as described below:
    public: The class is accessible by any other class.
    default: The class is accessible only by classes in the same package.

    The following choices are available for attributes and methods:
    default: A variable or method declared with no access control modifier is available to any other class in the same package.
    public: Accessible from any other class.
    protected: Provides the same access as the default access modifier, with the addition that subclasses can access protected methods and variables of the superclass (Subclasses and superclasses are covered in upcoming lessons).
    private: Accessible only within the declared class itself.

    Example:
    public class Vehicle {
      private int maxSpeed;
      private int wheels;
      private String color;
      private double fuelCapacity;

      public void horn() {
        System.out.println("Beep!");
      }
    }

    It's a best practice to keep the variables within a class private. The variables are accessible and modified using Getters and Setters.
    Tap Continue to learn about Getters and Setters.


33.1 Getters & Setters

Getters and Setters are used to effectively protect your data, particularly when creating classes. For each variable, the get method returns its value, while the set method sets the value.
Getters start with get, followed by the variable name, with the first letter of the variable name capitalized.
Setters start with set, followed by the variable name, with the first letter of the variable name capitalized.

     Example:
     public class Vehicle {
       private String color;

       // Getter
       public String getColor() {
         return color;
       }

      // Setter
       public void setColor(String c) {
         this.color = c;
       }

The getter method returns the value of the attribute.
The setter method takes a parameter and assigns it to the attribute.
The keyword this is used to refer to the current object. Basically, this.color is the color attribute of the current object.

Once our getter and setter have been defined, we can use it in our main

public class Vehicle {
    private String color;

    // Getter
    public String getColor() {
        return color;
    }

    // Setter
    public void setColor(String c) {
        this.color = c;
    }
}

class Program {
    public static void main(String[ ] args) {
        Vehicle v1 = new Vehicle();
        v1.setColor("Red");
        System.out.println(v1.getColor());
    }
}
Getters and setters allow us to have control over the values. You may, for example, validate the given value in the setter before actually setting the value.
Getters and setters are fundamental building blocks for encapsulation, which will be covered in the next module.


34.1 Constructors

Constructors are special methods invoked when an object is created and are used to initialize them.
A constructor can be used to provide initial values for object attributes.

- A constructor name must be same as its class name.
- A constructor must have no explicit return type.

Example of a constructor:
public class Vehicle {
  private String color;
  Vehicle() {
     color = "Red";
  }
}

The Vehicle() method is the constructor of our class, so whenever an object of that class is created, the color attribute will be set to "Red".
A constructor can also take parameters to initialize attributes.

public class Vehicle {
  private String color;
  Vehicle(String c) {
    color = c;
  }
}
You can think of constructors as methods that will set up your class by default, so you donâ€™t need to repeat the same code every time.
Using Constructors

The constructor is called when you create an object using the new keyword.
Example:
public class MyClass {
  public static void main(String[ ] args) {
    Vehicle v = new Vehicle("Blue");
  }
}

This will call the constructor, which will set the color attribute to "Blue".

35.1 Value & Reference Types
Value types are the basic types, and include byte, short, int, long, float, double, boolean, and char.
These data types store the values assigned to them in the corresponding memory locations.
So, when you pass them to a method, you basically operate on the variable's value, rather than on the variable itself.
Example:
public class MyClass {
    public static void main(String[ ] args) {
        int x = 5;
        addOneTo(x);
        System.out.println(x);
    }

    static void addOneTo(int num) {
        num = num + 1;
    }
}
The method from the example above takes the value of its parameter, which is why the original variable is not affected and 5 remains as its value.
Value Types
What is the output of this code?
public static void main(String[ ] args) {
   int x = 4;
   square(x);
   System.out.println(x);
}
static void square(int x) {
   x = x*x;
}
->4

Reference Types

A reference type stores a reference (or address) to the memory location where the corresponding data is stored.
When you create an object using the constructor, you create a reference variable.
For example, consider having a Person class defined:

public class MyClass {
    public static void main(String[ ] args) {
        Person j;
        j = new Person("John");
        j.setAge(25);
        celebrateBirthday(j);
        System.out.println(j.getAge());
  }

    static void celebrateBirthday(Person p) {
        p.setAge(p.getAge() + 1);
    }
}

public class Person {
    private String name;
    private int age;

    Person (String n) {
        this.name = n;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int a) {
        this.age = a;
    }
}

________________________________________________
Reference Types
What is the output of this code?
public static void main(String[ ] args) {
  Person p = new Person();
  p.setAge(25);
  change(p);
  System.out.println(p.getAge());
}
static void change(Person p) {
  p.setAge(10);
}
--------->10

35.2 The Math Class

The JDK defines a number of useful classes, one of them being the Math class, which provides predefined methods for mathematical operations.
You do not need to create an object of the Math class to use it. To access it, just type in Math. and the corresponding method.

Math.abs() returns the absolute value of its parameter.
public class Program {
    public static void main(String[] args) {
        int a = Math.abs(10); //module
        System.out.println(a);

        int b = Math.abs(-20);
        System.out.println(b);//module
    }
}

Math.ceil() rounds a floating point value up to the nearest integer value. The rounded value is returned as a double
public class Program {
    public static void main(String[] args) {
        double c = Math.ceil(7.342);//8.0
        System.out.println(c);
    }
}

Similarly, Math.floor() rounds a floating point value down to the nearest integer value.
public class Program {
    public static void main(String[] args) {
        double f = Math.floor(7.343);//7
        System.out.println(f);
    }
}

Math.max() Mathc.min() returns the largest or minimal of its parameters.
public class Program {
    public static void main(String[] args) {
        int m = Math.max(10, 20);
        System.out.println(m);//20
                int m = Math.min(10, 20);
                System.out.println(m);//10
    }
}

public class Program {
    public static void main(String[] args) {
        double p = Math.pow(2, 3); 2*2*2
        System.out.println(p);--->8
    }
}

37.1 Static

Static
When you declare a variable or a method as static, it belongs to the class, rather than to a specific instance. This means that only one instance of a static member exists, even if you create multiple objects of the class, or if you don't create any. It will be shared by all objects.
Example:
public class Counter {
  public static int COUNT=0;
  Counter() {
    COUNT++;
  }
}

The COUNT variable will be shared by all objects of that class.
Now, we can create objects of our Counter class in main, and access the static variable.

public class Counter {
    public static int COUNT=0;
    Counter() {
        COUNT++;
    }
}

public class MyClass {
    public static void main(String[ ] args) {
        Counter c1 = new Counter();
        Counter c2 = new Counter();
        System.out.println(Counter.COUNT);
    }
}

public class Counter {
    public static int COUNT=0;
    Counter() {
        COUNT++;
    }
}

public class MyClass {
    public static void main(String[ ] args) {
        Counter c1 = new Counter();
        Counter c2 = new Counter();
        System.out.println(Counter.COUNT);
    }
}
----->2

The output is 2, because the COUNT variable is static and gets incremented by one each time a new object of the Counter class is created. In the code above, we created 2 objects.
You can also access the static variable using any object of that class, such as c1.COUNT.

Itâ€™s a common practice to use upper case when naming a static variable, although not mandatory.

Static
The same concept applies to static methods.
public class Vehicle {
  public static void horn() {
    System.out.println("Beep");
  }
}

Now, the horn method can be called without creating an object:
public class Vehicle {
    public static void horn() {
        System.out.println("Beep");
    }
}

public class MyClass {
    public static void main(String[ ] args) {
        Vehicle.horn();
    }
}
---->Beep

Another example of static methods are those of the Math class, which is why you can call them without creating a Math object.
Also, the main method must always be static.

Static
What output results from this code?
class Person {
public static int pCount;
public static void main(String[ ] args) {
   Person.pCount = 1;
   Person.pCount++;
   System.out.println(Person.pCount);
  }
}
--->2

38.1 Final
Use the final keyword to mark a variable constant, so that it can be assigned only once.
Example:
class MyClass {
    public static final double PI = 3.14;
    public static void main(String[ ] args) {
        System.out.println(PI);
    }
}

PI is now a constant. Any attempt to assign it a value will cause an error.
Methods and classes can also be marked final. This serves to restrict methods so that they can't be overridden and classes so that they can't be subclassed.
These concepts will be covered in the next module.

39.1 Packages

Packages are used to avoid name conflicts and to control access to classes.
A package can be defined as a group made up of similar types of classes, along with sub-packages.
Creating a package in Java is quite easy. Simply right click on your src directory and click New->Package. Give your package a name and click Finish.
You will notice that the new package appears in the project directory. Now you can move and create classes inside that package. We have moved our Vehicle, Counter and Animal classes to the package samples.

When you move/create a class in your package, the following code will appear at the top of the list of files.
package samples;

This indicates the package to which the class belongs.
Now, we need to import the classes that are inside a package in our main to be able to use them.
The following example shows how to use the Vehicle class of the samples package.

import samples.Vehicle;

class MyClass {
  public static void main(String[ ] args) {
    Vehicle v1 = new Vehicle();
    v1.horn();
  }
}

Two major results occur when a class is placed in a package. First, the name of the package becomes a part of the name of the class. Second, the name of the package must match the directory structure where the corresponding class file resides.

Use a wildcard to import all classes in a package.
For example, import samples.* will import all classes in the samples package.

60.1 Module 4 Quiz
