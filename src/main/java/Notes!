1. Method Overloadng( Перегруузка)
Когда у методов одинаковые имена но разные параметры это я вляется перегрузкой.
Используется когда вычисления используемые в одном методе нужно применить к разным параметрам.

Пример 1:

public static void main(String[] args) {
    int a = 5;
    double b = 10.2;
    System.out.println(doubleTheValue(a));
    System.out.println(doubleTheValue(b));
    }
    public static int doubleTheValue(int a){
        return a * 2;
    }
    public static double doubleTheValue(double b){
        return b * 2;
    }

Пример 2:

int max(int a, int b) {
  if(a > b) {
    return a;
  }
  else {
    return b;
  }
}
Метод, показанный выше, будет работать только для параметров типа integer.
Однако, возможно, мы захотим использовать его и для  дробных. Для этого вам нужно перегрузить метод max:

class A{
    public void doSomething(){
        System.out.println("A");
    }
    public void doSomething(String str){
        System.out.println(str);
    }
}
public static void main(String[] args) {
        A obj = new A();
        obj.doSomething("B");
        }

--->B

2. Абстрактный метод

Абстрактный метод - это метод, который объявляется без реализации (без фигурных скобок, за которым следует точка с запятой): abstract void walk();

Абстрактный класс определяется с помощью ключевого слова abstract.
- Если класс объявлен абстрактным, он не может быть создан (вы не можете создавать объекты этого типа).
- Чтобы использовать абстрактный класс, вы должны наследовать его от другого класса.
- Любой класс, содержащий абстрактный метод, должен быть определен как абстрактный.

abstract class Animal {
    int legs = 0;
    abstract void makeSound();
}

class Cat extends Animal {
    public void makeSound() {
        System.out.println("Meow");
    }
}

public class Program {
    public static void main(String[] args) {
        Cat c = new Cat();
        c.makeSound();
    }
}
************************************************

abstract class Animal{
    public int age;
    public abstract int printAge();
}
class Dog extends Animal{
    public int printAge() {
        return age;
    }
}


3.Интерфейсы
Интерфейс - это полностью абстрактный класс, который содержит только абстрактные методы.
Некоторые спецификации для интерфейсов:
- Определяется с помощью ключевого слова interface.
- Может содержать только статические конечные переменные.
- Не может содержать конструктор, поскольку интерфейсы не могут быть созданы.
- Интерфейсы могут расширять другие интерфейсы.
- Класс может реализовывать любое количество интерфейсов.

Наследуемый подкласс может иметь только один суперкласс
Пример:
interface Animal {
    public void eat();
    public void makeSound();
}

class Cat implements Animal {

    public void makeSound() {
        System.out.println("Meow");
    }

    public void eat() {
        System.out.println("omnomnom");
    }
}

public class Program {
    public static void main(String[] args) {
        Cat c = new Cat();
        c.eat();
        c.makeSound();

4.Type Casting(приведение типа)

Присвоение значения одного типа переменной другого типа называется приведением типа.
Чтобы привести значение к определенному типу, поместите тип в круглые скобки и поместите его перед значением
Пример:
int a = (int)3.14
System.out.println(a)

Upcastin(повышение подкласса)
Пример:
Animal a = new Cat();
Java автоматически преобразовала переменную типа Cat в тип Animal.

Downcasting(понижение подкласса)
Приведение объекта суперкласса к его подклассу называется понижением.
Пример:
Animal a = new Cat();
((Cat)a).makeSound();
Java  попытается привести переменную a к типу Cat и вызвать ее метод makeSound().

Anonymous classes(анонимные классы)
Создавая обьекты анонимных классов можно изменять исходный метод на лету
Пример:

class Machine {
  public void start() {
    System.out.println("Starting...");
  }
}

class Program {
    public static void main(String[ ] args) {
        Machine m = new Machine() {
            @Override public void start() {
                System.out.println("Wooooo");
            }
        };
        m.start();
    }
}
---->Wooooo
@Override - переопределение методов
Модификация применима только к текущему объекту(m1), а не к самому классу. Поэтому, если мы создадим еще один объект этого класса, реализация метода start будет той, что определена в классе.
Пример:
class Machine {
    public void start() {
        System.out.println("Starting...");
    }
}

class Program {
    public static void main(String[ ] args) {
        Machine m1 = new Machine() {
            @Override public void start() {
                System.out.println("Wooooo");
            }
        };
        Machine m2 = new Machine();
        m2.start();
    }
}
--->Starting

5.inner Classes (Внутренние классы)
Java поддерживает вложенные классы; класс может быть членом другого класса.
Создать внутренний класс довольно просто. Просто напишите класс в классе. В отличие от класса, внутренний класс может быть закрытым. Как только вы объявите внутренний класс закрытым, к нему нельзя будет получить доступ из объекта вне класса.

Пример:

class Robot {
    int id;
    Robot(int i) {
        id = i;
        Brain b = new Brain();
        b.think();
    }

    private class Brain {
        public void think() {
            System.out.println(id + " is thinking");
        }
    }
}

public class Program {
    public static void main(String[] args) {
        Robot r = new Robot(1);
    }
}
Класс Robot имеет внутренний класс Brain. Внутренний класс может получить доступ ко всем переменным-членам и методам своего внешнего класса, но к нему нельзя получить доступ из любого внешнего класса.
Пример 2:
public class Person{
    class Hand{
    public void shake(){
        System.out.println("Hi");
        }
    }
}

6. The equals() method (сравнение объектов)
(==)
Помните, что когда вы создаете объекты, переменные хранят ссылки на объекты. Таким образом, когда вы сравниваете объекты с помощью оператора проверки на равенство (==), на самом деле сравниваются ссылки, а не значения объектов.
    Пример:
    class Animal {
        String name;
        Animal(String n) {
            name = n;
        }
    }

    class MyClass {
        public static void main(String[ ] args) {
            Animal a1 = new Animal("Robby");
            Animal a2 = new Animal("Robby");
            System.out.println(a1 == a2);
        }
    }
 ----> false
Несмотря на наличие двух объектов с одинаковыми именами, проверка на равенство возвращает false, потому что у нас есть два разных объекта (две разные ссылки или области памяти).
Пример 2:
class A {
 private int x;
 public static void main(String[ ] args) {
   A a = new A();
   a.x = 5;
   A b = new A();
   b.x = 5;
   System.out.println(a == b);
 }
}
---->false

equals() (метод проверки семантичекого равенства)

Каждый объект имеет предопределенный метод equals(), который используется для проверки семантического равенства.
Но чтобы заставить его работать для наших классов, нам нужно переопределить его и проверить нужные нам условия.
Существует простой и быстрый способ создания метода equals(), кроме написания его вручную.
Просто щелкните правой кнопкой мыши в своем классе, перейдите в Source-> Generate hashCode() и equals()...
Генератор автоматически создаст необходимые методы.
    class Animal {
      String name;
      Animal(String n) {
        name = n;
      }
      @Override
      public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
      }
      @Override
      public boolean equals(Object obj) {
        if (this == obj)
          return true;
        if (obj == null)
          return false;
        if (getClass() != obj.getClass())
          return false;
        Animal other = (Animal) obj;
        if (name == null) {
          if (other.name != null)
            return false;
        } else if (!name.equals(other.name))
          return false;
        return true;
      }
    }
Автоматически сгенерированный метод hashCode() используется для определения места внутреннего хранения объекта. Всякий раз, когда вы реализуете equals, вы ДОЛЖНЫ также реализовывать hashCode. Мы можем снова запустить тест,
используя метод equals:

    class Animal {
        String name;
        Animal(String n) {
            name = n;
        }
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((name == null) ? 0 : name.hashCode());
            return result;
        }
        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            Animal other = (Animal) obj;
            if (name == null) {
                if (other.name != null)
                    return false;
            } else if (!name.equals(other.name))
                return false;
            return true;
        }
    }

    class Program {
        public static void main(String[ ] args) {
            Animal a1 = new Animal("Robby");
            Animal a2 = new Animal("Robby");
            System.out.println(a1.equals(a2));
        }
    }
---->true

Вы можете использовать это же меню для создания других полезных методов, таких как геттеры и сеттеры для атрибутов вашего класса.
Пример 2:
    class A{
        private int x;
        public boolean equals(Object o) {
            return ((A)o).x == this.x;
        }

        public static void main(String[] args) {
        A a = new A();
        a.x = 9;
        A b = new A();
        b.x = 5;
        System.out.println(a.equal(b))
        }
    }

7. Enums()
Enum — это специальный тип, используемый для определения коллекций констант.
Вот простой пример Enum:

    enum Rank {
      SOLDIER,
      SERGEANT,
      CAPTAIN
    }
Обратите внимание, что значения разделены запятыми. Вы можете ссылаться на константы в приведенном выше перечислении с помощью точечного синтаксиса.

Rank a = Rank.SOLDIER;

По сути, перечисления определяют переменные, которые представляют элементы фиксированного набора.
После объявления Enum мы можем проверить соответствующие значения, например, с помощью оператора switch.

public class Program {
    enum Rank {
        SOLDIER,
        SERGEANT,
        CAPTAIN
    }
    public static void main(String[] args) {
        Rank a = Rank.SOLDIER;

        switch(a) {
            case SOLDIER:
                System.out.println("Soldier says hi!");
                break;
            case SERGEANT:
                System.out.println("Sergeant says Hello!");
                break;
            case CAPTAIN:
                System.out.println("Captain says Welcome!");
                break;
        }
    }
}

*******************
public Color {
  RED, BLUE, GREEN;
}
*******************

Вы всегда должны использовать Enums, когда переменная (особенно параметр метода) может принимать только одно из небольшого набора возможных значений.
Если вы используете Enums вместо целых чисел (или строковых кодов), вы увеличиваете количество проверок во время компиляции и избегаете ошибок из-за передачи недопустимых констант, а также документируете, какие значения допустимы для использования.

=======================Exceptions, Lists, Threads & Files(Исключения, списки, потоки и файлы)==========================
1.Exceptions(Исключения)
Исключением является проблема, возникающая во время выполнения программы. Исключения вызывают аварийное завершение программы.

runtime exception - ошибки проверяемые компилятором.

Exception Handling(обработка исключений)
Исключения можно перехватывать с помощью комбинации ключевых слов try и catch. Блок try/catch размещается вокруг кода, который может генерировать исключение.
Пример:

try {
  //выполняем проверку
} catch (Exception e) {
  //действие если проверка не прошла
}

Оператор catch включает объявление типа исключения, которое вы пытаетесь перехватить.
Если в блоке try возникает исключение, проверяется блок catch, следующий за попыткой.
Если тип возникшего исключения указан в блоке catch, исключение передается в блок catch так же, как аргумент передается в параметр метода.

В приведенном ниже примере демонстрируется обработка исключений при попытке доступа к несуществующему индексу массива:
Пример:

public class MyClass {
    public static void main(String[ ] args) {
        try {
            int a[ ] = new int[2];
            System.out.println(a[5]);
        } catch (Exception e) {
            System.out.println("An error occurred");
        }
    }
}
Без блока try/catch этот код должен привести к краху программы, поскольку a[5] не существует.
(Exception e) в блоке catch — используется для перехвата всех возможных исключений.

пример2:
int x = 12;
int y = 0;
try
 {
   int z = x / y;
   System.out.println(z);
}
catch
 (Exception e) {
   System.out.println("Error");

2. Multiple Exceptions(Множественные исключения)
throw
Ключевое слово throw позволяет вручную генерировать исключения из ваших методов. Некоторые из многочисленных доступных типов исключений включают IndexOutOfBoundsException, IllegalArgumentException, ArithmeticException и т. д.
Например, мы можем сгенерировать ArithmeticException в нашем методе, когда параметр равен 0.
Премер:
public class Program {

    static int div(int a, int b) throws ArithmeticException {
        if(b == 0) {
            throw new ArithmeticException("Division by Zero");
        } else {
            return a / b;
        }
    }

    public static void main(String[] args) {
        System.out.println(div(42, 0));
    }

}
Оператор throws в определении метода определяет тип исключений, которые метод может генерировать. Затем ключевое слово throw создает соответствующее исключение вместе с пользовательским сообщением
Если мы вызовем метод div со вторым параметром, равным 0, он выдаст исключение ArithmeticException с сообщением «Деление на ноль».
В операторе throws можно определить несколько исключений, используя список, разделенный запятыми.

Exception Handling(обработка исключений)

Один блок try может содержать несколько блоков catch, которые обрабатывают разные исключения по отдельности.
Пример:
try {
  //some code
} catch (ExceptionType1 e1) {
  //Catch block
} catch (ExceptionType2 e2) {
  //Catch block
} catch (ExceptionType3 e3) {
  //Catch block
}

Все блоки catch должны быть упорядочены от наиболее конкретного к наиболее общему.
После определенных исключений вы можете использовать тип Exception для обработки всех других исключений в качестве последнего улова.

3. Threads(потоки)

385 / 5 000
Результаты перевода
Java — это многопоточный язык программирования.
Это означает, что наша программа может оптимально использовать доступные ресурсы, одновременно запуская два или более компонентов, при этом каждый компонент выполняет свою задачу.
Вы можете разделить определенные операции внутри одного приложения на отдельные потоки, которые выполняются параллельно.

Существует два способа создания потока.
    1. Расширьте класс Thread, наследуемый от класса Thread, переопределите его метод run() и запишите функциональность потока в методе run().
    Затем вы создаете новый объект своего класса и вызываете его метод start для запуска потока.
    Пример:

class Loader extends Thread {
    public void run() {
        System.out.println("Hello");
    }
}

class MyClass {
    public static void main(String[ ] args) {
        Loader obj = new Loader();
        obj.start();
    }
}
--->Hello

Как видите, наш класс Loader расширяет класс Thread и переопределяет его метод run().
Когда мы создаем объект obj и вызываем его метод start(), операторы метода run() выполняются в другом потоке.

Каждому потоку Java назначается приоритет, чтобы помочь операционной системе определить порядок, в котором следует планировать потоки.
Приоритеты варьируются от 1 до 10, при этом каждый поток по умолчанию имеет приоритет 5.
Вы можете установить приоритет потока с помощью метода setPriority().

4.Runtime vs. Checked Exceptions(Время выполнения и проверенные исключения)

Существует два типа исключений: проверяемые и непроверяемые (также называемые временем выполнения).
Основное отличие состоит в том, что проверенные исключения проверяются при компиляции, а непроверенные исключения проверяются во время выполнения.
Как упоминалось в нашем предыдущем уроке, Thread.sleep() генерирует InterruptedException. Это пример проверенного исключения.
Ваш код не скомпилируется, пока вы не обработаете исключение.
Пример:
public class MyClass {
  public static void main(String[ ] args) {
    try {
      Thread.sleep(1000);
    } catch (InterruptedException e) {
      //some code
    }
  }
}
Мы видели примеры непроверенных исключений, которые проверяются во время выполнения, в предыдущих уроках.
Пример (при попытке деления на 0):

public class MyClass {
    public static void main(String[ ] args) {
        int value = 7;
        value = value / 0;
    }
}
Хорошо знать типы исключений, потому что они могут помочь вам быстрее отлаживать код.

5.ArrayList(Список массивов)
API Java предоставляет специальные классы для хранения групп объектов и управления ими. Одним из таких классов является ArrayList.
Стандартные массивы Java имеют фиксированную длину, а это означает, что после создания они не могут увеличиваться или уменьшаться.
С другой стороны, ArrayLists создаются с начальным размером, но при превышении этого размера коллекция автоматически увеличивается.
Когда объекты удаляются, ArrayList может уменьшаться в размере. Обратите внимание, что класс ArrayList находится в пакете java.util, поэтому его необходимо импортировать перед использованием.
Создайте ArrayList, как и любой другой объект.

import java.util.ArrayList;
//...
ArrayList colors = new ArrayList();

При желании вы можете указать емкость и тип объектов, которые будут храниться в ArrayList:

ArrayList<String> colors = new ArrayList<String>(10);

Приведенный выше код определяет ArrayList of Strings с 10 в качестве начального размера.

ArrayLists хранят объекты. Таким образом, указанный тип должен быть типом класса.
Вы не можете передать, например, int в качестве типа объектов.
Вместо этого используйте специальные типы классов, которые соответствуют желаемому типу значения, например Integer для int, Double для double и т. д.

Класс ArrayList предоставляет ряд полезных методов для управления своими объектами. Метод add() добавляет новые объекты в список ArrayList. И наоборот, метод remove() удаляет объекты из списка ArrayList.
Пример:
import java.util.ArrayList;

public class MyClass {
    public static void main(String[ ] args) {
        ArrayList<String> colors = new ArrayList<String>();
        colors.add("Red");
        colors.add("Blue");
        colors.add("Green");
        colors.add("Orange");
        colors.remove("Green");

        System.out.println(colors);
    }
}

Другие полезные методы включают следующее:
 - contains(): возвращает true, если список содержит указанный элемент
 - get(int index): возвращает элемент в указанной позиции в списке
 - size(): возвращает количество элементов в списке. list
 - clear(): удаляет все элементы из списка.
 Примечание: как и в случае с массивами, индексация начинается с 0.

6.LinkedList(Связанный список)
LinkedList очень похож по синтаксису на ArrayList.
Вы можете легко изменить ArrayList на LinkedList, изменив тип объекта.
Вы не можете указать начальную емкость для LinkedList.

import java.util.LinkedList;
public class MyClass {
    public static void main(String[ ] args) {
        LinkedList<String> c = new LinkedList<String>();
        c.add("Red");
        c.add("Blue");
        c.add("Green");
        c.add("Orange");
        c.remove("Green");
        System.out.println(c);
    }
}

LinkedList и ArrayList

Наиболее заметное различие между LinkedList и ArrayList заключается в способе хранения объектов.

ArrayList лучше подходит для хранения и доступа к данным, так как он очень похож на обычный массив.

LinkedList лучше подходит для манипулирования данными, например для выполнения многочисленных вставок и удалений.
Помимо хранения объекта, LinkedList хранит адрес памяти (или ссылку) следующего за ним элемента.
Он называется Списком ссылок, потому что каждый элемент содержит ссылку на соседний элемент.

import java.util.LinkedList;

public class MyClass {
    public static void main(String[ ] args) {
        LinkedList<String> c = new LinkedList<String>();
        c.add("Red");
        c.add("Blue");
        c.add("Green");
        c.add("Orange");
        c.remove("Green");

        for(String s: c) {
            System.out.println(s);
        }
    }
}

- Используйте ArrayList, когда вам нужен быстрый доступ к вашим данным.
- Используйте LinkedList, когда вам нужно сделать большое количество вставок и/или удалений.

7.HashMap
Массивы и списки хранят элементы в виде упорядоченных коллекций, где каждому элементу присваивается целочисленный индекс.
HashMap используется для хранения коллекций данных в виде пар ключ-значение.
Один объект используется как ключ (индекс) для другого объекта (значения).
Методы put, remove и get используются для добавления, удаления и доступа к значениям в HashMap.
Пример:

import java.util.HashMap;
public class MyClass {
    public static void main(String[ ] args) {
        HashMap<String, Integer> points = new HashMap<String, Integer>();
        points.put("Amy", 154);
        points.put("Dave", 42);
        points.put("Rob", 733);
        System.out.println(points.get("Dave"));
    }
}
Мы создали HashMap со строками в качестве ключей и целыми числами в качестве значений.
Используйте метод get и соответствующий ключ для доступа к элементам HashMap.

HashMap не может содержать повторяющиеся ключи.
Добавление нового элемента с уже существующим ключом перезаписывает старый элемент.
Класс HashMap предоставляет методы containsKey и containsValue, определяющие наличие указанного ключа или значения.
null — это специальный тип, представляющий отсутствие значения.

8. Sets(Наборы)

Набор — это коллекция, которая не может содержать повторяющиеся элементы.
Он моделирует математическую абстракцию множеств. Одной из реализаций Set является класс HashSet.
Пример:
import java.util.HashSet;

public class MyClass {
    public static void main(String[ ] args) {
        HashSet<String> set = new HashSet<String>();
        set.add("A");
        set.add("B");
        set.add("C");
        System.out.println(set);
    }
}
LinkedHashSet
Класс HashSet не сохраняет автоматически порядок добавления элементов.
Чтобы упорядочить элементы, используйте LinkedHashSet, который поддерживает связанный список элементов набора в том порядке, в котором они были вставлены.
Что такое хеширование?
Хеш-таблица хранит информацию с помощью механизма, называемого хэшированием, в котором информационное содержание ключа используется для определения уникального значения, называемого хэш-кодом.
Таким образом, каждый элемент в HashSet связан со своим уникальным хэш-кодом.

9. Sorting Lists(Сортировка списков)
Для манипулирования данными в различных типах коллекций API Java предоставляет класс Collections, включенный в пакет java.util.
Одним из самых популярных методов класса Collections является sort(), который сортирует элементы вашего типа коллекции.
Методы в классе Collections являются статическими, поэтому для их вызова не требуется объект Collections.

Пример:
import java.util.ArrayList;
import java.util.Collections;

public class MyClass {
    public static void main(String[ ] args) {
        ArrayList<String> animals = new ArrayList<String>();
        animals.add("tiger");
        animals.add("cat");
        animals.add("snake");
        animals.add("dog");

        Collections.sort(animals);

        System.out.println(animals);
    }
}

Вы можете вызывать методы sort() для различных типов списков, таких как целые числа.

import java.util.ArrayList;
import java.util.Collections;

public class MyClass {
    public static void main(String[ ] args) {
        ArrayList<Integer> nums = new ArrayList<Integer>();
        nums.add(3);
        nums.add(36);
        nums.add(73);
        nums.add(40);
        nums.add(1);

        Collections.sort(nums);
        System.out.println(nums);
    }
}

10. Iterators(Итераторы)

Итератор — это объект, который позволяет циклически перемещаться по коллекции, получать или удалять элементы.
Прежде чем вы сможете получить доступ к коллекции через итератор, вы должны получить его.
Каждый из классов коллекций предоставляет метод iterator(), который возвращает итератор в начало коллекции.
Используя этот объект итератора, вы можете получить доступ к каждому элементу в коллекции, по одному элементу за раз.
Класс Iterator предоставляет следующие методы:

hasNext(): возвращает значение true, если есть еще хотя бы один элемент; в противном случае возвращается ложь.
next(): возвращает следующий объект и продвигает итератор.
remove(): удаляет из коллекции последний объект, возвращенный функцией next.
Класс Iterator должен быть импортирован из пакета java.util.
Пример:

import java.util.Iterator;
import java.util.LinkedList;

public class MyClass {
public static void main(String[ ] args) {
LinkedList<String> animals = new LinkedList<String>();
animals.add("fox");
animals.add("cat");
animals.add("dog");
animals.add("rabbit");

Iterator<String> it = animals.iterator();
String value = it.next();
System.out.println(value);
    }
}
it.next() возвращает первый элемент в списке, а затем перемещает итератор к следующему элементу.
Каждый раз, когда вы вызываете it.next(), итератор перемещается к следующему элементу списка.

Обычно итераторы используются в циклах. На каждой итерации цикла вы можете получить доступ к соответствующему элементу списка.
Пример:
import java.util.Iterator;
import java.util.LinkedList;

public class MyClass {
    public static void main(String[ ] args) {
        LinkedList<String> animals = new LinkedList<String>();
        animals.add("fox");
        animals.add("cat");
        animals.add("dog");
        animals.add("rabbit");

        Iterator<String> it = animals.iterator();
        while(it.hasNext()) {
            String value = it.next();
            System.out.println(value);
        }
    }
}
Здесь цикл while определяет, есть ли в итераторе дополнительные элементы, печатает значение элемента и продвигает итератор к следующему.

11. Working with Files(работа с файлами)
Пакет java.io включает класс File, позволяющий работать с файлами. Для начала создайте объект File и укажите путь к файлу в конструкторе.

import java.io.File;
...
File file = new File("C:\\data\\input-file.txt");

С помощью метода exists() вы можете определить, существует ли файл.

import java.io.File;

public class MyClass {
  public static void main(String[ ] args) {
    File x = new File("C:\\sololearn\\test.txt");
    if(x.exists()) {
     System.out.println(x.getName() +  "exists!");
    }
    else {
     System.out.println("The file does not exist");
    }
  }
}
Приведенный выше код выводит сообщение о том, существует ли файл по указанному пути.
Метод getName() возвращает имя файла. Обратите внимание, что мы использовали двойную обратную косую черту в пути, так как одна обратная косая черта должна быть экранирована в строке пути.

Reading a File(чтение из файла)
Файлы удобны для хранения и извлечения данных, и существует несколько способов чтения из файла.
Один из самых простых способов — использовать класс Scanner из пакета java.util.
Конструктор класса Scanner может принимать объект File в качестве входных данных. Чтобы прочитать содержимое текстового файла по пути «C:\\sololearn\\test.txt», нам нужно создать объект File с соответствующим путем и передать его объекту Scanner.

try {
  File x = new File("C:\\sololearn\\test.txt");
  Scanner sc = new Scanner(x);
}
 catch (FileNotFoundException e) {

}

Класс Scanner наследуется от Iterator, поэтому ведет себя как один. Мы можем использовать метод next() объекта Scanner для чтения содержимого файла.

try {
  File x = new File("C:\\sololearn\\test.txt");
  Scanner sc = new Scanner(x);
  while(sc.hasNext()) {
    System.out.println(sc.next());
  }
  sc.close();
} catch (FileNotFoundException e) {
  System.out.println("Error");
}

Содержимое файла выводится слово за словом, потому что метод next() возвращает каждое слово отдельно.

Хорошей практикой всегда является закрытие файла после завершения работы с ним.
Один из способов сделать это — использовать метод close() сканера.

try {
    File f = new File("a.txt");
    Scanner sc = new Scanner(f);
    while (sc.hasNext()){
    String a = sc.next();
    String b = sc.next()
    System.out.println(a + "" + b);
    }
    sc.close();
}
cath (Exception e){
    System.out.println("Error")
 }


 Creating Files(Создание файлов)

Formatter, еще один полезный класс в пакете java.util, используется для создания контента и его записи в файлы.
Пример:
import java.util.Formatter;

public class MyClass {
   public static void main(String[ ] args) {
  try {
    Formatter f = new Formatter("C:\\sololearn\\test.txt");
  } catch (Exception e) {
      System.out.println("Error");
  }
  }
}

Создает пустой файл по указанному пути. Если файл уже существует, он будет перезаписан.

Writing to Files(Запись в файл)
После создания файла вы можете записать в него содержимое, используя тот же метод format() объекта Formatter.
Пример:

import java.io.File;
import java.util.Scanner;
import java.util.Formatter;

public class MyClass {
    public static void main(String[ ] args) {
        try {
            Formatter f = new Formatter("test.txt");
            f.format("%s %s %s", "1","John", "Smith \r\n");
            f.format("%s %s %s", "2","Amy", "Brown");
            f.close();

            File x = new File("test.txt");
            Scanner sc = new Scanner(x);
            while(sc.hasNext()) {
                System.out.println(sc.next());
            }
            sc.close();
        } catch (Exception e) {
        System.out.println("Error");
        }
    }
}

Метод format() форматирует свои параметры в соответствии с первым параметром.
%s означает строку и заменяется первым параметром после формата.
Второй %s заменяется следующим и так далее.
Итак, формат %s %s %s обозначает три строки, разделенные пробелами.

Примечание. \r\n — это символ новой строки в Windows.
Приведенный выше код создает файл со следующим содержимым:

1 Джон Смит
2 Эми Браун

Не забудьте закрыть файл, как только закончите писать в него!

__________try catch_________________
void myFunc(int a, int b){
try {
    System.out.println(a/b);
  }
catch (Exception e) {
     System.out.println("Error");
  }
________________________________________________
_______________throws___________________________
void myFunc(int arg) throws IllegalArgumentException {
if (arg < 0)
   throw new IllegalArgumentException();
}
________________________________________________
________________________________________________
How many lines of output will this code produce?
class B implements Runnable {
   public void run() {
     System.out.println("B");
   }
}
class A extends Thread {
   public void run() {
    System.out.println("A");
    Thread t = new Thread(new B());
    t.start();
   }
public static void main(String[ ] args) {
   A object = new A();
   object.start();
   }
}
-->A
-->B
__________________________________________________________
